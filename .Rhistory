df <- data.frame(x = m:n, value = unit_curve(t = t, m = m, n = m:n, r = r))
midpoint <- data.frame(x = unit_block_summary(t, m, n, r)[[3]],
value = unit_block_summary(t, m, n, r)[[4]],
label = paste0("[", round(unit_block_summary(t, m, n, r)[[3]]), ", ", round(unit_block_summary(t, m, n, r)[[4]]), "]"))
ggplot(df, aes(x = x, y = value)) +
geom_line() +
geom_point(data = midpoint, aes(x = x, y = value)) +
geom_text(data = midpoint, aes(x = x, y = value, label = label),
hjust = 0, vjust = 0)
}
plot_block_summary(t = 125, m = 201, n = 500, r = .75)
}
unit_block_summary <- function(t, m, n, r, na.rm = FALSE){
if(!is.numeric(t) | !is.numeric(m) | !is.numeric(n) | !is.numeric(r)){
stop('This function only works for numeric inputs!\n',
'You have provided objects of the following classes:\n',
't: ', class(t), '\n',
'm: ', class(n), '\n',
'n: ', class(n), '\n',
'r: ', class(r))
}
if( m > n ){
stop('This function caculates summary statistics for the production block between \n',
'm and n; consequently, n must be larger than m.')
}
if(na.rm == TRUE) {
t <- t[!is.na(t)]
m <- m[!is.na(m)]
n <- n[!is.na(n)]
r <- r[!is.na(r)]
warning('Any strings with NA were filtered. This may result in \n',
'unexpected recycling.')
}
b <- log(r)/log(2)
c <- 1 + b
t1 <- t/(m^b)
k <- (((n + 0.5)^(c) - (m - 0.5)^(c)) / ((c) * (n - m + 1)))^(1/b)
t_k <- unit_curve(t = t1, n = k, r = r)
block_units <- n - m + 1
block_hours <- t_k * block_units
y <- list(`block units` = block_units,
`block hours` = block_hours,
`midpoint unit` = k,
`midpoint hours` = t_k)
return(y)
}
plot_block_summary <- function(t, m, n, r){
df <- data.frame(x = m:n, value = unit_curve(t = t, m = m, n = m:n, r = r))
midpoint <- data.frame(x = unit_block_summary(t, m, n, r)[[3]],
value = unit_block_summary(t, m, n, r)[[4]],
label = paste0("[", round(unit_block_summary(t, m, n, r)[[3]]), ", ", round(unit_block_summary(t, m, n, r)[[4]]), "]"))
ggplot(df, aes(x = x, y = value)) +
geom_line() +
geom_point(data = midpoint, aes(x = x, y = value)) +
geom_text(data = midpoint, aes(x = x, y = value, label = label),
hjust = 0, vjust = 0)
}
plot_block_summary(t = 125, m = 201, n = 500, r = .75)
plot_unit_curve <- function(t, m, n, r, model = "u", level = "u"){
if(level != "u" & level != "c"){
stop('Undefined specification for the level argument.' )
}
if(model == "u") {
df <- data.frame(x = m:n,
value = unit_curve(t = t, m = m, n = m:n, r = r),
cumulative.value = cumsum(unit_curve(t = t, m, n = m:n, r = r)))
if(level == "u") {
ggplot(data = df, aes(x = x, y = value)) +
geom_line()
} else {
ggplot(data = df, aes(x = x, y = cumulative.value)) +
geom_line()
}
} else if(model == "ca") {
df <- data.frame(x = m:n,
value = ca_unit(t = t, m = m, n = m:n, r = r),
cumulative.value = cumsum(ca_unit(t = t, m = m, n = m:n, r = r)))
if(level == "u") {
ggplot(data = df, aes(x = x, y = value)) +
geom_line()
} else {
ggplot(data = df, aes(x = x, y = cumulative.value)) +
geom_line()
}
} else if(model == "both") {
df1 <- data.frame(x = m:n,
model = "unit model",
value = unit_curve(t = t, m = m, n = m:n, r = r),
cumulative.value = cumsum(unit_curve(t = t, m, n = m:n, r = r)))
df2 <- data.frame(x = m:n,
model = "ca model",
value = ca_unit(t = t, m = m, n = m:n, r = r),
cumulative.value = cumsum(ca_unit(t = t, m = m, n = m:n, r = r)))
df <- rbind(df1, df2)
if(level == "u") {
ggplot(data = df, aes(x = x, y = value, color = model)) +
geom_line()
} else{
ggplot(data = df, aes(x = x, y = cumulative.value, color = model)) +
geom_line()
}
}
}
plot_unit_curve(t = 100, m = 1, n = 125, r = .85, model = "u", level = "u")
plot_unit_curve(t = 100, m = 1, n = 125, r = .85, model = "u", level = "c")
plot_unit_curve(t = 100, m = 1, n = 125, r = .85, model = "ca", level = "u")
plot_unit_curve(t = 100, m = 1, n = 125, r = .85, model = "ca", level = "c")
cum_error <- function(n, r1, r2){
if(!is.numeric(n) | !is.numeric(r1) | !is.numeric(r2)){
stop('This function only works for numeric inputs!\n',
'You have provided objects of the following classes:\n',
'n: ', class(n), '\n',
'r1: ', class(r1), '\n',
'r2: ', class(r2))
}
if(r1 == r2){
return('The learning curve rates you are comparing are the same.')
}
b1 <- log(r1)/log(2)
b2 <- log(r2)/log(2)
y <- n^(b2 - b1) - 1
return(y)
}
cum_error(n = 250, r1 = .85, r2 = .87)
unit_curve(t = 250, n = 125, r = .85)
unit_curve(t = 250, n = 125, r = .87)
agg_curve <- function(t, r, n, na.rm = FALSE){
if(!is.numeric(t) | !is.numeric(n) | !is.numeric(r)){
stop('This function only works for numeric inputs!\n',
'You have provided objects of the following classes:\n',
't: ', class(t), '\n',
'n: ', class(n), '\n',
'r: ', class(r))
}
if(na.rm == TRUE) {
t <- t[!is.na(t)]
n <- n[!is.na(n)]
r <- r[!is.na(r)]
warning('Any strings with NA were filtered. This may result in \n',
'unexpected recycling.')
}
H <- sum(t)
b <- log(r)/log(2)
c <- 1 + b
hours_i <- t * n^c
hours_all <- sum(hours_i)
B <- (log(hours_all) - log(H)) / log(n)
y <- H*n^B
return(y)
}
t <- c(70, 45, 25)
r <- c(.85, .87, .80)
agg_curve(t = t, r = r, n = 300)
natural_slope(r = c(.80, .85, .90))
natural_slope <- function(r, na.rm = FALSE){
if(!is.numeric(r)){
stop('This function only works for numeric inputs!\n',
'You have provided a rate in the form of a ',class(r))
}
if(na.rm == TRUE) {
r <- r[!is.na(r)]
}
b <- log(r)/log(2)
return(b)
}
natural_slope(r = c(.80, .85, .90))
lc_rate <- function(b, na.rm = FALSE){
if(!is.numeric(b)){
stop('This function only works for numeric inputs!\n',
'You have provided a natural slope in the form of a ',class(b))
}
if(na.rm == TRUE) {
b <- b[!is.na(b)]
}
y = 10^(b * log10(2) + 2)/100
return(y)
}
lc_rate(b = c(-.19, -.22, -.25))
blog_gen()
library(brocks)
help(package = "brocks")
blog_gen()
natural_slope_est <- function(T, t, n){
if(!is.numeric(T) | !is.numeric(t) | !is.numeric(n)){
stop('This function only works for numeric inputs!\n',
'You have provided objects of the following classes:\n',
'T: ', class(T), '\n',
't: ', class(t), '\n',
'n: ', class(n))
}
b <- (log(T) - log(t)) / log(n) - 1
return(b)
}
80*250
natural_slope_est(T = 17250, t = 80, n = 250)
lc_rate_est <- function(T, t, n){
if(!is.numeric(T) | !is.numeric(t) | !is.numeric(n)){
stop('This function only works for numeric inputs!\n',
'You have provided objects of the following classes:\n',
'T: ', class(T), '\n',
't: ', class(t), '\n',
'n: ', class(n))
}
b <- (log(T) - log(t)) / log(n) - 1
y = 10^(b * log10(2) + 2)/100
return(y)
}
lc_rate_est(T = 17250, t = 80, n = 250)
lc_rate_est(T = 14250, t = 80, n = 250)
lc_rate_est(T = 10250, t = 80, n = 250)
lc_rate_est(T = 8250, t = 80, n = 250)
lc_rate_est(T = 8250, t = 80, n = 250)
blog_gen()
library(brocks)
new_post(title = "84th MORS Symposium")
blog_gen()
library(brocks)
new_post(title = "Session 1&#58; Deworming Kenya - Translating Research to Action")
blog_gen()
library(brocks)
new_post(title = "Monthly Reading Recap")
library(brocks)
new_post(title = "Session Two: Our Piece of the Pie")
blog_gen()
blog_gen()
new_post(title = "Defining and Measuring Success in a Harm-reduction Context I")
blog_gen()
blog_gen()
blog_gen()
blog_gen()
15+37+69+131
blog_gen()
new_post(title = "Impact Evaluation I")
blog_gen()
blog_gen()
new_post(title = "Impact Evaluation II: Randomized Experiments")
blog_gen()
blog_gen()
new_post(title = "Process Evaluations")
blog_gen()
library(brocks)
1/36
blog_gen()
sample(1:10, 25)
?sample
sample(x = 1:10, size = 25)
sample(x = 1:100, size = 25)
sample(x = 1:100, size = 25)
set.seed(5)
sample(x = 1:100, size = 25)
set.seed(5)
sample(x = 1:100, size = 25)
rep(TRUE, 50)
c(rep(TRUE, 50), rep(FALSE, 50))
sample(c(rep(TRUE, 500), rep(FALSE, 500)), 100)
sum(sample(c(rep(TRUE, 500), rep(FALSE, 500)), 100))
sum(sample(c(rep(TRUE, 500), rep(FALSE, 500)), 200))
1:100
sample(1:100, 25)
c(rep(TRUE, 50), rep(FALSE, 50))
sum(sample(c(rep(TRUE, 50), rep(FALSE, 50)), 25))
sum(sample(c(rep(TRUE, 50), rep(FALSE, 50)), 50))
blog_gen()
blog_gen()
new_post(title = "Impact Evaluations III - Non-experimental Methods")
blog_gen()
new_post(title = "Designing an Impact Evaluation")
new_post(title = "Lean Decision-Making Impact Evaluations")
blog_gen()
library(brocks)
new_post(title = "Replication")
blog_gen()
new_post(title = "Impact Evaluation V")
blog_gen()
new_post(title = "Aggregating Evidence")
blog_gen()
blog_gen()
devtools::install_github("brendan-r/brocks")
library(brocks)
new_post("learningCurve Package")
blog_gen()
blog_gen()
library(brocks)
new_post("Data Wrangling with R!")
blog_gen()
blog_gen()
blog_gen()
blog_gen()
library(brocks)
new_post("KraljicMatrix Package")
blog_gen()
library(KraljicMatrix)
vignette(kraljic)
vignette("kraljic")
library(dplyr)
psc <- psc %>%
mutate(x_SAVF_score = SAVF_score(x_attribute, 1, 5, .653),
y_SAVF_score = SAVF_score(y_attribute, 1, 10, .70))
kraljic_matrix(psc, x_SAVF_score, y_SAVF_score)
blog_gen()
blog_gen()
new_post("An Assessment of U.S. Savings Rates")
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
library(dplyr)        # transforming (joining, summarizing, etc.) data
library(tibble)       # coercing data to tibbles
library(magrittr)     # for piping capabilities
library(DT)           # for printing nice HTML output tables
library(ggplot2)      # visualizing data
library(ggrepel)      # Repel overlapping text labels in plots
#####################
# download PCI data #
#####################
# url for PCI HTML table
url_pci <- read_html("http://www.bea.gov/iTable/iTableHtml.cfm?reqid=70&step=30&isuri=1&7022=21&7023=0&7024=non-industry&7033=-1&7025=0&7026=00000,01000,02000,04000,05000,06000,08000,09000,10000,11000,12000,13000,15000,16000,17000,18000,19000,20000,21000,22000,23000,24000,25000,26000,27000,28000,29000,30000,31000,32000,33000,34000,35000,36000,37000,38000,39000,40000,41000,42000,44000,45000,46000,47000,48000,49000,50000,51000,53000,54000,55000,56000&7027=-1&7001=421&7028=53&7031=0&7040=-1&7083=levels&7029=23&7090=70")
# download PCI table and extract the data frame from the list
pci_raw <- url_pci %>%
html_nodes("table") %>%
.[2] %>%
html_table(fill = TRUE) %>%
.[[1]]
#####################
# download PCE data #
#####################
# url for PCE HTML table
url_pce <- read_html("http://www.bea.gov/iTable/iTableHtml.cfm?reqid=70&step=10&isuri=1&7003=2&7035=-1&7004=x&7005=1&7006=00000,01000,02000,04000,05000,06000,08000,09000,10000,11000,12000,13000,15000,16000,17000,18000,19000,20000,21000,22000,23000,24000,25000,26000,27000,28000,29000,30000,31000,32000,33000,34000,35000,36000,37000,38000,39000,40000,41000,42000,44000,45000,46000,47000,48000,49000,50000,51000,53000,54000,55000,56000&7036=-1&7001=62&7002=6&7090=70&7007=-1&7093=levels")
# download PCE table and extract the data frame from the list
pce_raw <- url_pce %>%
html_nodes("table") %>%
.[2] %>%
html_table(fill = TRUE) %>%
.[[1]]
# create tidy PCI data
pci_clean <- pci_raw %>%
apply(2, function(x) gsub("[[:punct:]]", "", x)) %>%
as_tibble(.) %>%
group_by(GeoFips, GeoName) %>%
mutate_each(funs(as.numeric)) %>%
ungroup() %>%
select(Fips = GeoFips, Location = GeoName, `1997`:`2014`) %>%
gather(Year, Income, -c(Fips, Location))
# create tidy PCE data
pce_clean <- pce_raw %>%
apply(2, function(x) gsub("[[:punct:]]", "", x)) %>%
as_tibble(.) %>%
group_by(Fips, Area) %>%
mutate_each(funs(as.numeric)) %>%
ungroup() %>%
rename(Location = Area) %>%
gather(Year, Expenditures, -c(Fips, Location))
# create tidy merged data frame
data_clean <- pci_clean %>%
left_join(pce_clean) %>%
mutate(Savings = Income - Expenditures,
Year = as.numeric(Year)) %>%
filter(Location != "District of Columbia")
datatable(data_clean, caption = 'Table 1: Clean and tidy data.')
data_clean %>%
filter(Location == "United States") %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = Income, group = 1), color = "darkseagreen4") +
geom_line(aes(y = Expenditures, group = 1), color = "firebrick3") +
geom_ribbon(aes(ymin = Expenditures, ymax = Income, group = 1), fill = "darkseagreen1", alpha = .5) +
annotate("text", x = 2014.15, y = 41000, label = "2014 PCI: $40.5K",
color = "darkseagreen4", hjust = 0, size = 3) +
annotate("text", x = 2014.15, y = 37000, label = "2014 PCE: $37.2K",
color = "firebrick3", hjust = 0, size = 3) +
annotate("text", x = 2014.15, y = 39000, label = "2014 Savings: $3.3K",
color = "darkseagreen2", hjust = 0, size = 3) +
scale_x_continuous(NULL, limits = c(1997, 2016.5), breaks = seq(1998, 2014, by = 4)) +
scale_y_continuous(NULL, labels = scales::dollar) +
ggtitle("Figure 1: Growth in PCI and PCE",
subtitle = "Growth represented as current year dollars from 1997-2014 (not adjusted for inflation)") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
text = element_text(family = "Georgia", size = 12),
plot.title = element_text(size = 28, margin = margin(b = 10)),
plot.subtitle = element_text(size = 12, color = "darkslategrey", margin = margin(b = 25)))
data_clean %>%
filter(Location == "United States") %>%
mutate(Savings_Rate = Savings / Income) %>%
ggplot(aes(Year, Savings_Rate)) +
geom_line() +
geom_hline(aes(yintercept = mean(Savings_Rate)), linetype = "dashed", alpha = .5) +
annotate("text", x = 2010, y = .08, label = "Average: 8.6%", size = 3) +
scale_y_continuous(NULL, labels = scales::percent, limits = c(0, .115)) +
scale_x_continuous(NULL, breaks = seq(1998, 2014, by = 4)) +
ggtitle("Figure 2: National-level savings rate",
subtitle = "Changes in state-level savings rates from 1997-2014") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
text = element_text(family = "Georgia", size = 12),
plot.title = element_text(size = 28, margin = margin(b = 10)),
plot.subtitle = element_text(size = 12, color = "darkslategrey", margin = margin(b = 25)))
data_clean %>%
mutate(region = tolower(Location),
Savings_Rate = Savings / Income) %>%
right_join(map_data("state")) %>%
select(-subregion) %>%
filter(Year %in% seq(1998, 2014, by = 2)) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = Savings_Rate)) +
facet_wrap(~ Year, ncol = 3) +
scale_fill_gradient2(name = "Savings Rate", labels = scales::percent) +
ggtitle("Figure 3: Savings rate changes over time",
subtitle = "Temporal map assessment of state-level savings rates (1998-2014)") +
expand_limits() +
theme_void() +
theme(strip.text.x = element_text(size = 12),
text = element_text(family = "Georgia"),
plot.title = element_text(size = 28, margin = margin(b = 10)),
plot.subtitle = element_text(size = 12, color = "darkslategrey", margin = margin(b = 25)))
savings_rate <- data_clean %>%
mutate(Savings_Rate = Savings / Income) %>%
filter(Location != "United States")
top5 <- savings_rate %>%
arrange(desc(Savings_Rate)) %>%
filter(Year == 2014) %>%
slice(1:5)
bottom5 <- savings_rate %>%
arrange(Savings_Rate) %>%
filter(Year == 2014) %>%
slice(1:5)
avg <- savings_rate %>%
group_by(Year) %>%
summarise(Avg_mn = mean(Savings_Rate),
Avg_md = median(Savings_Rate)) %>%
mutate(Avg = "Average")
ggplot(savings_rate, aes(Year, Savings_Rate, group = Location)) +
geom_line(alpha = .1) +
geom_line(data = filter(savings_rate, Location %in% top5$Location),
aes(Year, Savings_Rate, group = Location), color = "dodgerblue") +
geom_line(data = filter(savings_rate, Location %in% bottom5$Location),
aes(Year, Savings_Rate, group = Location), color = "red") +
geom_line(data = avg, aes(Year, Avg_mn, group = 1), linetype = "dashed") +
annotate("text", x = 2014.25, y = .071, label = "Average", hjust = 0, size = 3) +
geom_text_repel(data = top5, aes(label = Location), nudge_x = .5, size = 3) +
geom_point(data = top5, aes(Year, Savings_Rate), color = "dodgerblue") +
geom_text_repel(data = bottom5, aes(label = Location), nudge_x = 0.5, size = 3) +
geom_point(data = bottom5, aes(Year, Savings_Rate), color = "red") +
scale_x_continuous(NULL, limits = c(1997, 2015.25), breaks = seq(1998, 2014, by = 2)) +
scale_y_continuous(NULL, labels = scales::percent) +
ggtitle("Figure 4: Savings rate changes over time",
subtitle = "Temporal assessment of state-level savings rates (1997-2014)") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
text = element_text(family = "Georgia"),
plot.title = element_text(size = 28, margin = margin(b = 10)),
plot.subtitle = element_text(size = 12, color = "darkslategrey", margin = margin(b = 25)))
install.packages("ggrepel")
install.packages("ggrepel")
savings_rate <- data_clean %>%
mutate(Savings_Rate = Savings / Income) %>%
filter(Location != "United States")
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
library(dplyr)        # transforming (joining, summarizing, etc.) data
library(tibble)       # coercing data to tibbles
library(magrittr)     # for piping capabilities
library(DT)           # for printing nice HTML output tables
library(ggplot2)      # visualizing data
library(ggrepel)      # Repel overlapping text labels in plots
savings_rate <- data_clean %>%
mutate(Savings_Rate = Savings / Income) %>%
filter(Location != "United States")
top5 <- savings_rate %>%
arrange(desc(Savings_Rate)) %>%
filter(Year == 2014) %>%
slice(1:5)
bottom5 <- savings_rate %>%
arrange(Savings_Rate) %>%
filter(Year == 2014) %>%
slice(1:5)
avg <- savings_rate %>%
group_by(Year) %>%
summarise(Avg_mn = mean(Savings_Rate),
Avg_md = median(Savings_Rate)) %>%
mutate(Avg = "Average")
ggplot(savings_rate, aes(Year, Savings_Rate, group = Location)) +
geom_line(alpha = .1) +
geom_line(data = filter(savings_rate, Location %in% top5$Location),
aes(Year, Savings_Rate, group = Location), color = "dodgerblue") +
geom_line(data = filter(savings_rate, Location %in% bottom5$Location),
aes(Year, Savings_Rate, group = Location), color = "red") +
geom_line(data = avg, aes(Year, Avg_mn, group = 1), linetype = "dashed") +
annotate("text", x = 2014.25, y = .071, label = "Average", hjust = 0, size = 3) +
geom_text_repel(data = top5, aes(label = Location), nudge_x = .5, size = 3) +
geom_point(data = top5, aes(Year, Savings_Rate), color = "dodgerblue") +
geom_text_repel(data = bottom5, aes(label = Location), nudge_x = 0.5, size = 3) +
geom_point(data = bottom5, aes(Year, Savings_Rate), color = "red") +
scale_x_continuous(NULL, limits = c(1997, 2015.25), breaks = seq(1998, 2014, by = 2)) +
scale_y_continuous(NULL, labels = scales::percent) +
ggtitle("Figure 4: Savings rate changes over time",
subtitle = "Temporal assessment of state-level savings rates (1997-2014)") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
text = element_text(family = "Georgia"),
plot.title = element_text(size = 28, margin = margin(b = 10)),
plot.subtitle = element_text(size = 12, color = "darkslategrey", margin = margin(b = 25)))
library(brocks)
blog_gen()
url_pci <- read_html("http://www.bea.gov/iTable/iTableHtml.cfm?reqid=70&step=30&isuri=1&7022=21&7023=0&7024=non-industry&7033=-1&7025=0&7026=00000,01000,02000,04000,05000,06000,08000,09000,10000,11000,12000,13000,15000,16000,17000,18000,19000,20000,21000,22000,23000,24000,25000,26000,27000,28000,29000,30000,31000,32000,33000,34000,35000,36000,37000,38000,39000,40000,41000,42000,44000,45000,46000,47000,48000,49000,50000,51000,53000,54000,55000,56000&7027=-1&7001=421&7028=53&7031=0&7040=-1&7083=levels&7029=23&7090=70")
blog_gen()
url_pci %>%
html_nodes("table") %>%
.[2] %>%
html_table(fill = TRUE) %>%
.[[1]]
install.packages(c("rvest", "tidyr", "dplyr", "tibble", "magrittr", "DT", "ggplot2", "ggrepel"))
install.packages(c("rvest", "tidyr", "dplyr", "tibble", "magrittr", "DT", "ggplot2", "ggrepel"))
library(brocks)
blog_gen()
